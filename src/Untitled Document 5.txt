StudentDashboard.js


import React, { useState, useEffect, useRef } from 'react';
import { Navigate, useParams } from 'react-router-dom';
import 'react-big-calendar/lib/css/react-big-calendar.css'; 
import { FaBars } from 'react-icons/fa'; 
import { IoMdArrowDropdown } from "react-icons/io";
import DashboardStudent from '../StudentComponents/DashboardStudent';
import MyProfileStudent from '../StudentComponents/MyProfileStudent';
import ApplyForLeaveStudent from '../StudentComponents/ApplyForLeaveStudent';
import ViewLeaveStatusStudent from '../StudentComponents/ViewLeaveStatusStudent';
import LogoutStudent from '../StudentComponents/LogoutStudent';
import { FaRegUser } from "react-icons/fa";
import { FaWpforms } from "react-icons/fa";
import { GrStatusGood } from "react-icons/gr";
import { IoMdLogOut } from "react-icons/io";

const StudentDashboard = () => {
    const [isPopupVisible, setIsPopupVisible] = useState(false);
    const { studentId } = useParams();
    const user = JSON.parse(localStorage.getItem('user'));

    const [activeSection, setActiveSection] = useState('dashboard');
    const [sidebarOpen, setSidebarOpen] = useState(true); 
    const [showLogoutModal, setShowLogoutModal] = useState(false); 
    const popupRef = useRef(null); 


    useEffect(() => {
        const handleClickOutside = (event) => {
            if (popupRef.current && !popupRef.current.contains(event.target)) {
                setIsPopupVisible(false);
            }
        };
        if (isPopupVisible) {
            document.addEventListener('mousedown', handleClickOutside);
        }
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [isPopupVisible]);


    const handleNavigation = (section) => {
        if (section === 'logout') {
            setShowLogoutModal(true); 
        } else {
            setActiveSection(section);
        }
    };

    const toggleSidebar = () => {
        setSidebarOpen(!sidebarOpen);
    };

    const togglePopup = () => {
        setIsPopupVisible(!isPopupVisible);
    };

    const closeLogoutModal = () => {
        setShowLogoutModal(false); 
    };

    if (user.role !== 'student') {
        return <Navigate to="/" />;
    }

    return (
        <div>
            <div className="h-screen">
                {/* profile page */}
                <div className="md:absolute w-full h-[8%] bg-gray-800 flex flex-row justify-between items-center">
                    <div className="flex flex-row justify-between items-center w-[90%] mx-auto">
                        <h1 className="text-white"></h1> {/* Dashboard */}
                        {/* profile */}
                        <div className="flex flex-row items-center justify-center gap-2">
                            <div onClick={togglePopup} className="flex items-center cursor-pointer gap-2">
                                <img className='goal_circle2 w-8 h-8 rounded-full' src={`${user.image}`} alt='user_image' />
                                <h2 className="text-white text-lg md:text-xl">{user.name}</h2>
                                <IoMdArrowDropdown />
                            </div>
                            {/* Popup menu */}
                            {isPopupVisible && (
                                <div ref={popupRef} className="absolute mt-20 z-50 w-52 bg-black">
                                    <ul className="flex flex-col shadow-xl text-white rounded-md gap-2 py-2">
                                        <li className="profile_zoom py-2 px-4 cursor-pointer rounded-md" onClick={() => handleNavigation('myprofile')}>
                                            &#9642; &nbsp;My Profile
                                        </li>
                                        <li className="profile_zoom py-2 px-4 cursor-pointer rounded-md" onClick={() => handleNavigation('logout')}>
                                            &#9642; &nbsp;Logout
                                        </li>
                                    </ul>
                                </div>
                            )}
                        </div>
                    </div>
                </div>

                <div className="flex h-[92%]">
                    {/* Sidebar Navigation */}
                    <div className={`bg-gray-800 h-screen text-white flex flex-col items-start transition-all duration-300 fixed inset-y-0 z-40 ${sidebarOpen ? 'w-50' : 'w-0'} md:relative`}>
                        <div className={`py-3.5 md:py-1 lg:py-0.6 xl:py-1 2xl:py-2 md:relative px-3 text-xl md:text-xl lg:text-xl xl:text-3xl font-bold flex items-center ${activeSection === 'dashboard' ? 'bg-red-500' : 'bg-gray-800'}`}>
                            <button onClick={toggleSidebar} className="px-2 py-1 md:p-4 text-white z-50">
                                <FaBars size={sidebarOpen ? 24 : 24} />
                            </button>
                            {sidebarOpen && (
                                <span className="py-0.5 px-6 cursor-pointer w-full flex items-center" onClick={() => handleNavigation('dashboard')}>
                                    Dashboard
                                </span>
                            )}
                        </div>
                        <ul className="flex flex-col w-full mt-0">
                            <li onClick={() => handleNavigation('myprofile')} className={`border-2 border-b-white py-3 ${sidebarOpen ? 'px-4' : 'px-0'} cursor-pointer w-full flex justify-start items-center text-sm md:text-lg font-bold ${activeSection === 'myprofile' ? 'bg-red-500' : 'bg-gray-800'}`}>
                                {sidebarOpen && <span className='flex items-center gap-2'><FaRegUser/>My Profile</span>}
                            </li>
                            <li onClick={() => handleNavigation('applyForLeave')} className={`border-2 border-b-white py-3 ${sidebarOpen ? 'px-4' : 'px-0'} cursor-pointer w-full flex justify-start items-center text-sm md:text-lg font-bold ${activeSection === 'applyForLeave' ? 'bg-red-500' : 'bg-gray-800'}`}>
                                {sidebarOpen && <span className='flex items-center gap-2'><FaWpforms/>Apply For Leave</span>}
                            </li>
                            <li onClick={() => handleNavigation('viewLeaveStatus')} className={`border-2 border-b-white py-3 ${sidebarOpen ? 'px-4' : 'px-0'} cursor-pointer w-full flex justify-start items-center text-sm md:text-lg font-bold ${activeSection === 'viewLeaveStatus' ? 'bg-red-500' : 'bg-gray-800'}`}>
                                {sidebarOpen && <span className='flex items-center gap-2'><GrStatusGood/>View Leave Status</span>}
                            </li>
                            <li onClick={() => handleNavigation('logout')} className={`border-2 border-b-white py-3 ${sidebarOpen ? 'px-4' : 'px-0'} cursor-pointer w-full flex justify-start items-center text-sm md:text-lg font-bold ${activeSection === 'logout' ? 'bg-red-500' : 'bg-gray-800'}`}>
                                {sidebarOpen && <span className='flex items-center gap-2'><IoMdLogOut/>Logout</span>}
                            </li>
                        </ul>
                    </div>

                    {/* Main Content Area */}
                    <div className={`flex-1 p-6 overflow-y-auto ml-0 transition-all duration-300`}>
                        {activeSection === 'dashboard' && <DashboardStudent/>}
                        {activeSection === 'myprofile' && <MyProfileStudent/>}
                        {activeSection === 'applyForLeave' && <ApplyForLeaveStudent/>}
                        {activeSection === 'viewLeaveStatus' && <ViewLeaveStatusStudent/>}
                    </div>
                </div>
            </div>
            {showLogoutModal && <LogoutStudent onCancel={closeLogoutModal} />}
        </div>
    );
};

export default StudentDashboard;






DashboardStudent.js


import moment from 'moment';
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Calendar, momentLocalizer } from 'react-big-calendar';
import 'react-big-calendar/lib/css/react-big-calendar.css'; 

const localizer = momentLocalizer(moment);

const DashboardStudent = () => {
  const [applyStudentLeave, setApplyStudentLeave] = useState([]);
  const [studentError, setStudentError] = useState('');
  const [error, setError] = useState('');
  const [totalLeave, setTotalLeave] = useState(12); 
  const [balanceLeave, setBalanceLeave] = useState(0);
  const [usedLeave, setUsedLeave] = useState(0);
  const [totalWorkingDays, setTotalWorkingDays] = useState(0);
  const [totalDaysInMonth, setTotalDaysInMonth] = useState(0);
  const [attendancePercentage, setAttendancePercentage] = useState(0);

  const API = axios.create({
    baseURL: 'http://localhost:3001',
  });

  const user = JSON.parse(localStorage.getItem('user'));

  useEffect(() => {
    const fetchLeaveRequests = async () => {
      try {
        const response = await API.get(`/userLeaveRequests?name=${user.name}`);
        const filteredRequests = response.data.filter(
          (request) => request.name === user.name
        );
        if (filteredRequests.length > 0) {
          setApplyStudentLeave(filteredRequests);
          calculateLeaveData(filteredRequests);
        } else {
          setStudentError('');
        }
      } catch (err) {
        setStudentError('Error fetching leave requests');
      }
    };

    fetchLeaveRequests();
  }, [user.name]);

  const calculateLeaveData = (requests) => {
    let usedLeavesCount = requests.length;
    let totalDaysMonth = new Date(
      new Date().getFullYear(),
      new Date().getMonth() + 1,
      0
    ).getDate();
    setTotalDaysInMonth(totalDaysMonth);

    if (usedLeavesCount > totalDaysMonth) {
      setError('Used leaves cannot exceed total days in the month');
      usedLeavesCount = totalDaysMonth; 
    }

    let availableLeavesCount = totalLeave - usedLeavesCount;
    let attendancePercent =
      ((totalDaysMonth - usedLeavesCount) / totalDaysMonth) * 100;

    setUsedLeave(usedLeavesCount);
    setBalanceLeave(availableLeavesCount);
    setTotalWorkingDays(totalDaysMonth - usedLeavesCount); 
    setAttendancePercentage(attendancePercent.toFixed(2)); 
  };

  const events = applyStudentLeave.map((leave) => ({
    title: `${leave.name}'s leave ${leave.status.toLowerCase()}`,
    start: new Date(leave.fromDate),
    end: new Date(leave.toDate),
    allDay: true, 
    status: leave.status,
  }));

  const eventPropGetter = (event) => {
    let newStyle = {
      padding : '1px',
      fontSize : '14px',
      color: 'white',
      borderRadius: '0px',
      border: 'none',
    };

    if (event.status === 'Approved') {
      newStyle.backgroundColor = 'green'; 
    } 
    else if (event.status === 'Reject') {
      newStyle.backgroundColor = 'red'; 
    } 
    else {
      newStyle.backgroundColor = 'gray'; 
    }

    return {
      style: newStyle,
    };
  };

  return (
    <div className='mt-8 md:mt-16'>
      <h3>
        {studentError ? (
          studentError
        ) : (
          <span className='text-3xl 2xl:text-4xl 2xl:pt-12 font-bold flex justify-center items-center mb-4'>
            Student Calendar
          </span>
        )}
      </h3>
      <div className="flex flex-row justify-between items-center">
        <div>
          <h1 className="font-bold text-lg">Total Leave : {totalLeave}</h1>
          <h1 className="font-bold text-lg mb-2">Used Leave : {usedLeave}</h1>
        </div>
        <div>
          <h1 className="font-bold text-lg mb-2">Balance Leave :{balanceLeave}</h1>
        </div>
      </div>
      <Calendar
        localizer={localizer}
        events={events}
        startAccessor="start"
        endAccessor="end"
        style={{ height: 500 }}
        eventPropGetter={eventPropGetter} 
      />
    </div>
  );
};

export default DashboardStudent;





index.js




import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import { Toaster } from 'react-hot-toast';
import { AuthProvider } from '../src/auth/AuthContext';
import AuthGuard from '../src/auth/AuthGuard';
import { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom';
import Signup from './components/UserAuth/SignUp';
import Login from './components/UserAuth/Login';
import AdminDashboard from './components/pages/AdminDashboard';
import HodDashboard from './components/pages/HodDashboard';
import StudentDashboard from './components/pages/StudentDashboard';
import ForgetPassword from './components/pages/ForgetPassword';
import DashboardAdmin from '../src/components/AdminComponents/DashboardAdmin'
import MyProfileAdmin from './components/AdminComponents/MyProfileAdmin';
import ManageStudentAdmin from './components/AdminComponents/ManageStudentAdmin';
import ManageHodAdmin from './components/AdminComponents/ManageHodAdmin';
import ViewLeaveReportAdmin from './components/AdminComponents/ViewLeaveReportAdmin';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <AuthProvider>
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Navigate to="/login" replace />} />
        <Route path="/login" element={<Login />} />
        <Route path="/forgot-password" element={<ForgetPassword />} />
        <Route path="/signup" element={<Signup />} />

        {/* Admin Dashboard Routes */}
        <Route path="/admin-dashboard/:adminId" element={
          <AuthGuard allowedRoles={['admin']}>
            <AdminDashboard />
          </AuthGuard>
        }>
          {/* Nested Routes */}
          <Route index element={<DashboardAdmin />} />  {/* Default Dashboard */}
          <Route path="myprofile" element={<MyProfileAdmin />} />
          <Route path="studentManage" element={<ManageStudentAdmin />} />
          <Route path="HODManage" element={<ManageHodAdmin />} />
          <Route path="viewLeaveReport" element={<ViewLeaveReportAdmin />} />
        </Route>
        
        <Route 
          path="/hod-dashboard/:hodId" 
          element={
            <AuthGuard allowedRoles={['hod']}>
              <HodDashboard />
            </AuthGuard>
          } 
        />
        
        <Route 
          path="/student-dashboard/:studentId" 
          element={
            <AuthGuard allowedRoles={['student']}>
              <StudentDashboard />
            </AuthGuard>
          } 
        />
      </Routes>
    </BrowserRouter>
    <Toaster />
  </AuthProvider>
);




so in this code when i click on sidebar so that particular sidebar related page is open that run perfectly but one issue is that when click on sidebar components so the route still same for all sidebar pages but instead of that you can create an new routes for diff sidebar pages like below

so the bydefault dashbaord page is show with calender when student login
and when i click on sidebar My Profile so route still same instead of that dashbaord route you can create new routes is http://localhost:3000/student-dashboard/studentID/myprofile 

same as an apply for leave sidebar page routes is http://localhost:3000/student-dashboard/studentID/applyForLeaveStudent

same as an view leave status sidebar page routes is http://localhost:3000/student-dashboard/studentID/viewLeaveStatus and for logout nothing to change they run perfect and also tell me how to add an new routes in index.js file 
this students route make like an admin route we can make 
























import React, { useState, useRef } from 'react';
import { Navigate, useParams, Link, Outlet } from 'react-router-dom';
import { FaBars } from 'react-icons/fa';
import { IoMdArrowDropdown } from "react-icons/io";
import { HiOutlineDocumentReport } from "react-icons/hi";
import { FaRegUser, FaWpforms } from "react-icons/fa";
import { IoMdLogOut } from "react-icons/io";
import LogoutStudent from '../StudentComponents/LogoutStudent';

const StudentDashboard = () => {
    const [isPopupVisible, setIsPopupVisible] = useState(false);
    const { studentId } = useParams();
    const user = JSON.parse(localStorage.getItem('user'));
    const [sidebarOpen, setSidebarOpen] = useState(true);
    const [showLogoutModal, setShowLogoutModal] = useState(false); 
    const popupRef = useRef(null); 

    if (user.role !== 'student' || user.id !== studentId) {
        return <Navigate to="/" />;
    }

    const toggleSidebar = () => setSidebarOpen(!sidebarOpen);
    const togglePopup = () => setIsPopupVisible(!isPopupVisible);
    const closeLogoutModal = () => setShowLogoutModal(false);

    return (
        <div className="h-screen">
            {/* Top bar */}
            <div className="md:absolute w-full h-[8%] bg-gray-800 flex flex-row justify-between items-center">
                <div className="flex flex-row justify-between items-center w-[90%] mx-auto">
                    <h1 className="text-white"></h1> {/* Dashboard */}
                    {/* Profile Popup */}
                    <div className="flex flex-row items-center justify-center gap-2">
                        <div onClick={togglePopup} className="flex items-center cursor-pointer gap-2">
                            <img className="goal_circle2 w-8 h-8 rounded-full" src={`${user.image}`} alt="user_image" />
                            <h2 className="text-white text-lg md:text-xl">{user.name}</h2>
                            <IoMdArrowDropdown />
                        </div>
                        {isPopupVisible && (
                            <div ref={popupRef} className="absolute mt-20 z-50 w-52 bg-black">
                                <ul className="flex flex-col shadow-xl text-white rounded-md gap-2 py-2">
                                    <li className="profile_zoom py-2 px-4 cursor-pointer rounded-md">
                                        <Link to={`/student-dashboard/${studentId}/myprofile`}>My Profile</Link>
                                    </li>
                                    <li className="profile_zoom py-2 px-4 cursor-pointer rounded-md" onClick={() => setShowLogoutModal(true)}>
                                        Logout
                                    </li>
                                </ul>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* Sidebar */}
            <div className="flex h-[92%]">
                <div className={`bg-gray-800 h-screen text-white flex flex-col items-start transition-all duration-300 fixed inset-y-0 z-40 ${sidebarOpen ? 'w-50' : 'w-0'} md:relative`}>
                        <div className={`py-4 md:py-1 lg:py-1.5 md:relative px-3 text-xl md:text-2xl font-bold flex items-center`}>
                            <button onClick={toggleSidebar} className="px-2 py-1 md:p-4 text-white z-50">
                                <FaBars size={sidebarOpen ? 24 : 24} />
                            </button>
                            <li className="py-0.5 px-2 cursor-pointer w-full flex items-center">
                                <Link to={`/student-dashboard/${studentId}`} className="flex items-center gap-2">Dashboard</Link>
                            </li>
                        </div>
                        <ul className="flex flex-col w-full mt-0">
                            {/* <li className="border-2 border-b-white py-3 cursor-pointer">
                                <Link to={`/admin-dashboard/${adminId}`} className="flex items-center gap-2"><FaRegUser />Dashboard</Link>
                            </li> */}
                            <li className="border-2 border-b-white py-3 cursor-pointer">
                                <Link to={`/student-dashboard/${studentId}/myprofile`} className={`flex items-center gap-2`}><FaRegUser />{sidebarOpen ? "My Profile" : ""}</Link>
                            </li>
                            <li className="border-2 border-b-white py-3 cursor-pointer">
                                <Link to={`/student-dashboard/${studentId}/applyForLeaveStudent`} className={`flex items-center gap-2`}><FaWpforms />{sidebarOpen ? "Apply For Leave" : ""}</Link>
                            </li>
                            <li className="border-2 border-b-white py-3 cursor-pointer">
                                <Link to={`/student-dashboard/${studentId}/viewLeaveStatusStudent`} className={`flex items-center gap-2`}><HiOutlineDocumentReport />{sidebarOpen ? "View Leave Status" : ""}</Link>
                            </li>
                            <li className="border-2 border-b-white py-3 cursor-pointer">
                                <div onClick={() => setShowLogoutModal(true)} className={`flex items-center gap-2`}><IoMdLogOut />{sidebarOpen ? "Logout" : ""}</div>
                            </li>
                        </ul>
                </div>

                {/* Content Area */}
                <div className="flex-1 p-6 overflow-y-auto ml-0 transition-all duration-300">
                    <Outlet />
                </div>
            </div>

            {showLogoutModal && <LogoutStudent onCancel={closeLogoutModal} />}
        </div>
    );
};

export default StudentDashboard;


so in this code when i click on profile so that bg-color change to bg-reg-500 in tailwind and when click on apply for leave so that red color go to apply for leave as an background and when i click on any sidebar name so that color red-500 so you can write an code for this




















































import React, { useState, useRef } from 'react';
import { Navigate, useParams, Link, Outlet, useLocation } from 'react-router-dom';
import { FaBars } from 'react-icons/fa';
import { IoMdArrowDropdown } from "react-icons/io";
import { HiOutlineDocumentReport } from "react-icons/hi";
import { FaRegUser, FaWpforms } from "react-icons/fa";
import { IoMdLogOut } from "react-icons/io";
import LogoutAdmin from '../AdminComponents/LogoutAdmin';

const AdminDashboard = () => {
    const [isPopupVisible, setIsPopupVisible] = useState(false);
    const { adminId } = useParams();
    const user = JSON.parse(localStorage.getItem('user'));
    const [sidebarOpen, setSidebarOpen] = useState(true);
    const [showLogoutModal, setShowLogoutModal] = useState(false); 
    const popupRef = useRef(null);
    const location = useLocation();

    if (user.role !== 'admin' || user.id !== adminId) {
        return <Navigate to="/" />;
    }

    const toggleSidebar = () => setSidebarOpen(!sidebarOpen);
    const togglePopup = () => setIsPopupVisible(!isPopupVisible);
    const closeLogoutModal = () => setShowLogoutModal(false);

    // Helper function to check if a link is active
    const isActive = (path) => location.pathname === path;

    return (
        <div className="h-screen">
            {/* Top bar */}
            <div className="md:absolute w-full h-[8%] bg-gray-800 flex flex-row justify-between items-center">
                <div className="flex flex-row justify-between items-center w-[90%] mx-auto">
                    <h1 className="text-white"></h1> {/* Dashboard */}
                    {/* Profile Popup */}
                    <div className="flex flex-row items-center justify-center gap-2">
                        <div onClick={togglePopup} className="flex items-center cursor-pointer gap-2">
                            <img className="goal_circle2 w-8 h-8 rounded-full" src={`${user.image}`} alt="user_image" />
                            <h2 className="text-white text-lg md:text-xl">{user.name}</h2>
                            <IoMdArrowDropdown />
                        </div>
                        {isPopupVisible && (
                            <div ref={popupRef} className="absolute mt-16 z-50 w-52 bg-black rounded-xl">
                                <ul className="flex flex-col shadow-xl text-white rounded-md gap-2 py-2">
                                    <li className="profile_zoom py-2 px-4 cursor-pointer rounded-md">
                                        <Link to={`/admin-dashboard/${adminId}/myprofile`}>&#9642; &nbsp;My Profile</Link>
                                    </li>
                                    <li className="profile_zoom py-2 px-4 cursor-pointer rounded-md" onClick={() => setShowLogoutModal(true)}>
                                        &#9642; &nbsp; Logout
                                    </li>
                                </ul>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* Sidebar */}
            <div className="flex h-[92%]">
                <div className={`bg-gray-800 h-screen text-white flex flex-col items-start transition-all duration-300 fixed inset-y-0 z-40 ${sidebarOpen ? 'w-50' : 'w-0'} md:relative`}>
                    <div className={`py-4 md:py-1 lg:py-1.5 md:relative px-3 text-xl md:text-2xl font-bold flex items-center ${isActive(`/admin-dashboard/${adminId}`) ? 'bg-red-500' : ''}`}>
                        <button onClick={toggleSidebar} className="px-2 py-1 md:p-4 text-white z-50">
                            <FaBars size={sidebarOpen ? 24 : 24} />
                        </button>
                        <li className={`py-0.5 px-2 cursor-pointer w-full flex items-center`}>
                            <Link to={`/admin-dashboard/${adminId}`} className="flex items-center gap-2">Dashboard</Link>
                        </li>
                    </div>
                    <ul className="flex flex-col w-full mt-0">
                        <li className={`border-2 border-b-white py-3 cursor-pointer ${isActive(`/admin-dashboard/${adminId}/myprofile`) ? 'bg-red-500' : ''}`}>
                            <Link to={`/admin-dashboard/${adminId}/myprofile`} className={`flex items-center gap-2`}><FaRegUser />{sidebarOpen ? "My Profile" : ""}</Link>
                        </li>
                        <li className={`border-2 border-b-white py-3 cursor-pointer ${isActive(`/admin-dashboard/${adminId}/studentManage`) ? 'bg-red-500' : ''}`}>
                            <Link to={`/admin-dashboard/${adminId}/studentManage`} className={`flex items-center gap-2`}><FaWpforms />{sidebarOpen ? "Student Management" : ""}</Link>
                        </li>
                        <li className={`border-2 border-b-white py-3 cursor-pointer ${isActive(`/admin-dashboard/${adminId}/HODManage`) ? 'bg-red-500' : ''}`}>
                            <Link to={`/admin-dashboard/${adminId}/HODManage`} className={`flex items-center gap-2`}><HiOutlineDocumentReport />{sidebarOpen ? "HOD Management" : ""}</Link>
                        </li>
                        <li className={`border-2 border-b-white py-3 cursor-pointer ${isActive(`/admin-dashboard/${adminId}/viewLeaveReport`) ? 'bg-red-500' : ''}`}>
                            <Link to={`/admin-dashboard/${adminId}/viewLeaveReport`} className={`flex items-center gap-2`}><HiOutlineDocumentReport />{sidebarOpen ? "View Leave Report" : ""}</Link>
                        </li>
                        <li className="border-2 border-b-white py-3 cursor-pointer">
                            <div onClick={() => setShowLogoutModal(true)} className={`flex items-center gap-2`}><IoMdLogOut />{sidebarOpen ? "Logout" : ""}</div>
                        </li>
                    </ul>
                </div>

                {/* Content Area */}
                <div className="flex-1 p-6 overflow-y-auto ml-0 transition-all duration-300">
                    <Outlet />
                </div>
            </div>

            {showLogoutModal && <LogoutAdmin onCancel={closeLogoutModal} />}
        </div>
    );
};

export default AdminDashboard;

so in this code when i click on my profile pop up so they go to profile page thats work but when click on outside that popup so why they not hide in this code

{isPopupVisible && (
                            <div ref={popupRef} className="absolute mt-16 z-50 w-52 bg-black rounded-xl">
                                <ul className="flex flex-col shadow-xl text-white rounded-md gap-2 py-2">
                                    <li className="profile_zoom py-2 px-4 cursor-pointer rounded-md">
                                        <Link to={`/admin-dashboard/${adminId}/myprofile`}>&#9642; &nbsp;My Profile</Link>
                                    </li>
                                    <li className="profile_zoom py-2 px-4 cursor-pointer rounded-md" onClick={() => setShowLogoutModal(true)}>
                                        &#9642; &nbsp; Logout
                                    </li>
                                </ul>
                            </div>
                        )}
                        
                        
                        
                        
         
         
         
         
         
         
         



import React, { useState, useEffect } from "react";
import { toast } from 'react-hot-toast';
import { updateUserData } from "../../api"; 
import { FaRegUser } from "react-icons/fa";

const MyProfileHOD = () => {
    const [userDataShow, setUserDataShow] = useState(false);

    const [formData, setFormData] = useState({
        email: '',
        id: '',
        gender: '',
        phone: '',
        address: '',
        image: '',  
    });

    const user = JSON.parse(localStorage.getItem('user'));    
    useEffect(() => {
        if (user) {
            setFormData({
                email: user.email,
                id: user.id,
                gender: user.gender,
                phone: user.phone,
                address: user.address,
                image: user.image, 
            });
        }
    }, []);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData((prevFormData) => ({
            ...prevFormData,
            [name]: value,
        }));
    };

    const handleImageChange = (e) => {
        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onloadend = () => {
            setFormData((prevFormData) => ({
                ...prevFormData,
                image: reader.result, 
            }));
        };
        if (file) {
            reader.readAsDataURL(file);
        }
    };

    const handleFormSubmit = async (e) => {
        e.preventDefault();

        try {
            const updatedUser = {
                ...user, 
                ...formData 
            };

            await updateUserData(user, formData);
            
            localStorage.setItem('user', JSON.stringify(updatedUser));
            
            toast.success('Profle updated successfully!');
        } 
        catch (error) {
            toast.error('Update failed.');
        }

        setUserDataShow(false);
    };

    const changeUserProfile = () => {
        setUserDataShow(!userDataShow);
    };

    return (
        <div className="flex flex-col mt-4 md:mt-12 lg:mt-16 px-4 md:px-8 lg:px-16 xl:px-24">
            <h1 className="underline text-2xl md:text-3xl font-bold flex justify-center items-center mt-4">
                Welcome Profile Page
            </h1>
            <h1 className="items-center border-2 border-black border-b-4 text-lg md:text-xl lg:text-2xl font-medium flex pl-4 md:pl-8 mt-6 md:mt-8">
                <FaRegUser/>Profile Info
            </h1>

            <div className="flex flex-col md:flex-row gap-4 mt-6 md:mt-8">
                <div className="flex justify-center items-center">
                    <img 
                        className="w-32 h-32 md:w-40 md:h-40 lg:w-48 lg:h-48 object-cover rounded-full" 
                        src={formData.image} 
                        alt="user_image" 
                    />
                    {userDataShow && (
                        <input 
                            className="w-full mt-4 md:mt-8" 
                            type="file" 
                            accept="image/*"
                            onChange={handleImageChange} 
                        />
                    )}
                </div>
                {userDataShow ? (
                    <div className="w-full md:w-1/2 lg:w-2/3">
                        <form onSubmit={handleFormSubmit} className="flex flex-col gap-4">
                            <div className="flex flex-col md:flex-row items-start gap-4">
                                <label className="font-medium">Email:</label>
                                <input
                                    className="border px-2 py-1 rounded-md w-full md:w-2/3"
                                    type="email"
                                    name="email"
                                    value={formData.email}
                                    onChange={handleChange}
                                />
                            </div>
                            <div className="flex flex-col md:flex-row items-start gap-4 pt-4">
                                <label className="font-medium">Gender:</label>
                                <div className="flex items-center gap-4">
                                    <input
                                        className="ml-2"
                                        type="radio"
                                        name="gender"
                                        value="male"
                                        checked={formData.gender === "male"}
                                        onChange={handleChange}
                                    />
                                    <label>Male</label>
                                    <input
                                        type="radio"
                                        name="gender"
                                        value="female"
                                        checked={formData.gender === "female"}
                                        onChange={handleChange}
                                    />
                                    <label>Female</label>
                                </div>
                            </div>
                            <div className="flex flex-col md:flex-row items-start gap-4 pt-4">
                                <label className="font-medium">Mobile:</label>
                                <input
                                    className="border px-2 py-1 rounded-md w-full md:w-2/3"
                                    type="number"
                                    name="phone"
                                    value={formData.phone}
                                    onChange={handleChange}
                                />
                            </div>
                            <div className="flex flex-col md:flex-row items-start gap-4 pt-4">
                                <label className="font-medium">Address:</label>
                                <textarea
                                    cols={25}
                                    rows={3}
                                    type="text"
                                    name="address"
                                    value={formData.address}
                                    onChange={handleChange}
                                ></textarea>
                            </div>
                            <button type="submit" className="w-24 py-2 mt-4 bg-blue-500 text-white rounded-md">
                                Update
                            </button>
                        </form>
                    </div>
                ) : (
                    <div className="pb-8 flex flex-col gap-4 mt-4 md:mt-0 md:ml-12">
                        {/* <div className="flex flex-row gap-4">
                            <label className="font-medium">User ID:</label>
                            <p>{user.id}</p>
                        </div> */}
                        <div className="flex flex-row gap-4">
                            <label className="font-medium">Email:</label>
                            <p>{user.email}</p>
                        </div>
                        <div className="flex flex-row gap-4">
                            <label className="font-medium">Gender :</label>
                            <p>{user.gender}</p>
                        </div>
                        <div className="flex flex-row gap-4">
                            <label className="font-medium">Mobile :</label>
                            <p>{user.phone}</p>
                        </div>
                        <div className="flex flex-row gap-4">
                            <label className="font-medium">Address :</label>
                            <p>{user.address}</p>
                        </div>
                        <button onClick={changeUserProfile} className="w-16 py-2 mt-4 bg-green-500 text-white rounded-md">
                            Edit
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
};

export default MyProfileHOD;




so in this code when i click on edit button and update an user data so that time i have nothing to type in email,mobile and address so why the data is update is blank but instead of that 

in email compulsory type an email format text and @gmail.com otherwise show error is email is not correct

in mobile field 10 number is required not included below or above number or 10 number is compulsory 

in address you can't update as an blank minimum 3 character text writing is compulsory in address field  

so you can write an code for this functionality














import React, { useState, useEffect } from 'react';
import axios from 'axios';
import toast from 'react-hot-toast';
import { MdEdit } from "react-icons/md";

const ManageStudentAdmin = () => {
  const [leaveRequestsStudents, setLeaveRequestsStudents] = useState([]);
  const [studentError, setStudentError] = useState('');
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedStudent, setSelectedStudent] = useState(null);
  const [updatedData, setUpdatedData] = useState({});

  const API = axios.create({
    baseURL: 'http://localhost:3001',
  });

  const departments = ['hod1', 'hod2', 'hod3', 'hod4']; 

  useEffect(() => {
    const fetchLeaveRequests = async () => {
      try {
        const response = await API.get('/users?role=student');
        if (response) {
          console.log("single user data :" , response.data);
          console.log(response.data[0].department);
          const ids = await API.get('/users?id');
          console.log(ids.data.id);
          if(response.data.department === ids.data.id){
            response.data.department = ids.data.name
          }
          setLeaveRequestsStudents(response.data);
        } else {
          setStudentError('No Leave Data Available!');
        }
      } catch (err) {
        setStudentError('Error fetching leave requests');
      }
    };

    fetchLeaveRequests();
  }, []);

  const handleEditClick = async(student) => {
    // console.log("single user data :" , student);
    // const response = await API.get('/users?id');
    //   console.log(response.data);
    //   if(response.data.id === student.department){
    //     student.department = response.data.name
    //   }
    setSelectedStudent(student);
    setUpdatedData(student);
    setModalOpen(true);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setUpdatedData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleUpdate = async () => {
    try {
      await API.put(`/users/${updatedData.id}`, updatedData);
      setLeaveRequestsStudents((prev) =>
        prev.map((student) =>
          student.id === updatedData.id ? updatedData : student
        )
      );
      setModalOpen(false);
      toast.success("Update Data Successfully!");
    } catch (error) {
      console.error('Error updating student:', error);
      toast.error("Error While Updating Data!");
    }
  };

  return (
    <div className="container mx-auto p-4">
      <div className="overflow-x-auto">
        <h1 className="mt-20 mb-6 flex justify-left items-center text-2xl font-bold">Students Management List:</h1>

        {/* Render Student Management Table */}
        <table className="min-w-full text-center table-auto border-collapse border border-gray-300">
          <thead>
            <tr className="bg-gray-200">
              <th className="border border-gray-300 text-center text-2xl">ID</th>
              <th className="border border-gray-300 text-center text-2xl">Name</th>
              <th className="border border-gray-300 text-center text-2xl">Department</th>
              <th className="border border-gray-300 text-center text-2xl">Gender</th>
              <th className="border border-gray-300 text-center text-2xl">Role</th>
              <th className="border border-gray-300 text-center text-2xl">Phone Number</th>
              <th className="border border-gray-300 text-center text-2xl">Edit</th>
            </tr>
          </thead>
          <tbody>
            {leaveRequestsStudents.length === 0 ? (
              <tr>
                <td colSpan="5" className="text-center py-4">No leave requests found.</td>
              </tr>
            ) : (
              leaveRequestsStudents.map((student, index) => (
                <tr key={student.id}>
                  <td className="border border-gray-300">{index + 1}</td>
                  <td className="border border-gray-300">{student.name}</td>
                  <td className="border border-gray-300">{student.department}</td>
                  <td className="border border-gray-300">{student.gender}</td>
                  <td className="border border-gray-300">{student.role}</td>
                  <td className="border border-gray-300">{student.phone}</td>
                  <td className="border border-gray-300">
                    <button className="edit_btn" onClick={() => handleEditClick(student)}><MdEdit />Edit</button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Render Edit Student Modal */}
      {modalOpen && (
        <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-96">
            <h2 className="text-xl mb-4">Edit Student</h2>
            <div>
              <label className="block mb-2">
                Name:
                <input
                  autoComplete="off"
                  type="text"
                  name="name"
                  value={updatedData.name}
                  onChange={handleInputChange}
                  className="block w-full border border-gray-300 rounded p-2"
                />
              </label>
              <label className="block mb-2">
                Department:
                <select
                  name="department"
                  value={updatedData.department}
                  onChange={handleInputChange}
                  className="block w-full border border-gray-300 rounded p-2"
                >
                  {departments.map((dept) => (
                    <option key={dept} value={dept}>
                      {dept.charAt(0).toUpperCase() + dept.slice(1)}
                    </option>
                  ))}
                </select>
              </label>
              <label className="block mb-2">
                Gender:
                <div className="flex items-center">
                  <label className="mr-4">
                    <input
                      type="radio"
                      name="gender"
                      value="male"
                      checked={updatedData.gender === 'male'}
                      onChange={handleInputChange}
                    />
                    Male
                  </label>
                  <label>
                    <input
                      type="radio"
                      name="gender"
                      value="female"
                      checked={updatedData.gender === 'female'}
                      onChange={handleInputChange}
                    />
                    Female
                  </label>
                </div>
              </label>
              <label className="block mb-2">
                Phone:
                <input
                  autoComplete="off"
                  type="text"
                  name="phone"
                  value={updatedData.phone}
                  onChange={handleInputChange}
                  className="block w-full border border-gray-300 rounded p-2"
                />
              </label>
            </div>
            <div className="flex justify-between mt-4">
              <button
                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                onClick={handleUpdate}
              >
                Update
              </button>
              <button
                className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
                onClick={() => setModalOpen(false)}
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ManageStudentAdmin;

so in this code when fetchLeaveRequests call with the help of useEffect so in the department th data we can store department of particular students but instead of that in that td we can store hod name like 

ex.if in department of student is hod1 so store name Raman Sir dynacically in td data and same for others also in db.json file and not for only four hod but also we can add new hod so that data also show in departments td dynamically


db.json



{
"users" : [
   {
      "id": "hod1",
      "name": "Raman",
      "email": "raman@gmail.com",
      "password": "raman@123",
      "gender": "male",
      "image": "data:image/jpeg,
      "phone": "9845124578",
      "address": "gfdgf",
      "role": "hod"
    },
    {
      "id": "hod2",
      "name": "Shyam",
      "email": "shyam@gmail.com",
      "password": "shyam@123",
      "gender": "male",
      "image": "data:image/jpeg,
      "phone": "9841236510",
      "address": "gfdgf",
      "role": "hod"
    },
    {
      "id": "hod3",
      "name": "Radhika",
      "email": "radhika@gmail.com",
      "password": "radhika@123",
      "gender": "female",
      "image": "data:image/jpeg,
      "phone": "7541245891",
      "address": "gfdgf",
      "role": "hod"
    },
    {
      "id": "hod4",
      "name": "Karina",
      "email": "karina@gmail.com",
      "password": "karina@123",
      "gender": "female",
      "image": "data:image/jpeg,
      "phone": "8210546910",
      "address": "gfdgf",
      "role": "hod"
    },
}}



























import React, { useState, useEffect } from 'react';
import axios from 'axios';
import toast from 'react-hot-toast';
import { MdEdit } from "react-icons/md";

const ManageStudentAdmin = () => {
  const [leaveRequestsStudents, setLeaveRequestsStudents] = useState([]);
  const [hods, setHods] = useState({});
  const [studentError, setStudentError] = useState('');
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedStudent, setSelectedStudent] = useState(null);
  const [updatedData, setUpdatedData] = useState({});

  const API = axios.create({
    baseURL: 'http://localhost:3001',
  });

  useEffect(() => {
    const fetchLeaveRequests = async () => {
      try {
        // Fetch all students
        const studentResponse = await API.get('/users?role=student');
        // Fetch all HODs
        const hodResponse = await API.get('/users?role=hod');

        if (studentResponse.data && hodResponse.data) {
          // Create a mapping of department IDs to HOD names
          const hodMapping = hodResponse.data.reduce((acc, hod) => {
            acc[hod.id] = hod.name;
            return acc;
          }, {});

          // Update students' department with HOD names
          const studentsWithHodNames = studentResponse.data.map(student => ({
            ...student,
            department: hodMapping[student.department] || student.department,
          }));

          setLeaveRequestsStudents(studentsWithHodNames);
          setHods(hodMapping); // Store HOD data for further use if needed
        } else {
          setStudentError('No Leave Data Available!');
        }
      } catch (err) {
        setStudentError('Error fetching leave requests');
      }
    };

    fetchLeaveRequests();
  }, []);

  const handleEditClick = (student) => {
    setSelectedStudent(student);
    setUpdatedData(student);
    setModalOpen(true);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setUpdatedData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleUpdate = async () => {
    try {
      await API.put(`/users/${updatedData.id}`, updatedData);
      setLeaveRequestsStudents((prev) =>
        prev.map((student) =>
          student.id === updatedData.id ? { ...updatedData, department: hods[updatedData.department] || updatedData.department } : student
        )
      );
      setModalOpen(false);
      toast.success("Update Data Successfully!");
    } catch (error) {
      console.error('Error updating student:', error);
      toast.error("Error While Updating Data!");
    }
  };

  return (
    <div className="container mx-auto p-4">
      <div className="overflow-x-auto">
        <h1 className="mt-20 mb-6 flex justify-left items-center text-2xl font-bold">Students Management List:</h1>

        {/* Render Student Management Table */}
        <table className="min-w-full text-center table-auto border-collapse border border-gray-300">
          <thead>
            <tr className="bg-gray-200">
              <th className="border border-gray-300 text-center text-2xl">ID</th>
              <th className="border border-gray-300 text-center text-2xl">Name</th>
              <th className="border border-gray-300 text-center text-2xl">Department</th>
              <th className="border border-gray-300 text-center text-2xl">Gender</th>
              <th className="border border-gray-300 text-center text-2xl">Role</th>
              <th className="border border-gray-300 text-center text-2xl">Phone Number</th>
              <th className="border border-gray-300 text-center text-2xl">Edit</th>
            </tr>
          </thead>
          <tbody>
            {leaveRequestsStudents.length === 0 ? (
              <tr>
                <td colSpan="5" className="text-center py-4">No leave requests found.</td>
              </tr>
            ) : (
              leaveRequestsStudents.map((student, index) => (
                <tr key={student.id}>
                  <td className="border border-gray-300">{index + 1}</td>
                  <td className="border border-gray-300">{student.name}</td>
                  <td className="border border-gray-300">{student.department}</td>
                  <td className="border border-gray-300">{student.gender}</td>
                  <td className="border border-gray-300">{student.role}</td>
                  <td className="border border-gray-300">{student.phone}</td>
                  <td className="border border-gray-300">
                    <button className="edit_btn" onClick={() => handleEditClick(student)}><MdEdit />Edit</button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Render Edit Student Modal */}
      {modalOpen && (
        <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-96">
            <h2 className="text-xl mb-4">Edit Student</h2>
            <div>
              <label className="block mb-2">
                Name:
                <input
                  autoComplete="off"
                  type="text"
                  name="name"
                  value={updatedData.name}
                  onChange={handleInputChange}
                  className="block w-full border border-gray-300 rounded p-2"
                />
              </label>
              <label className="block mb-2">
                Department:
                <select
                  name="department"
                  value={updatedData.department}
                  onChange={handleInputChange}
                  className="block w-full border border-gray-300 rounded p-2"
                >
                  {Object.keys(hods).map((dept) => (
                    <option key={dept} value={dept}>
                      {hods[dept]}
                    </option>
                  ))}
                </select>
              </label>
              <label className="block mb-2">
                Gender:
                <div className="flex items-center">
                  <label className="mr-4">
                    <input
                      type="radio"
                      name="gender"
                      value="male"
                      checked={updatedData.gender === 'male'}
                      onChange={handleInputChange}
                    />
                    Male
                  </label>
                  <label>
                    <input
                      type="radio"
                      name="gender"
                      value="female"
                      checked={updatedData.gender === 'female'}
                      onChange={handleInputChange}
                    />
                    Female
                  </label>
                </div>
              </label>
              <label className="block mb-2">
                Phone:
                <input
                  autoComplete="off"
                  type="text"
                  name="phone"
                  value={updatedData.phone}
                  onChange={handleInputChange}
                  className="block w-full border border-gray-300 rounded p-2"
                />
              </label>
            </div>
            <div className="flex justify-between mt-4">
              <button
                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                onClick={handleUpdate}
              >
                Update
              </button>
              <button
                className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
                onClick={() => setModalOpen(false)}
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
export default ManageStudentAdmin;


so in this code when i click on edit button to update student data so when i try to update name and i remove name and that name i can not type anything means empty so why my code update that specific students data and same as an phone number also 

so when admin can edit students data so phone and name is not empty if empty so get an error so you can write an code for this
